package it.emarolab.scene_identification_tracking.semanticSceneLibrary.example;

import it.emarolab.amor.owlInterface.OWLReferences;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.objects.aMOR.MORPrimitive;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.Logger.SITBase;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.scene.SceneSemantics;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.scene.SceneTemplate;
import org.apache.jena.base.Sys;

public class SceneTest {

    /**
     * the name of the {@link it.emarolab.amor.owlInterface.OWLReferences} of the aMOR
     * library addressing the ontology in which the objects of this example will be mapped.
     */
    public static final String ONTO_NAME = "ONTO_NAME";
    /**
     * the file path in which the ontology created by this example will be saved.
     */
    public static final String ONTO_FILE_SAVING_PATH = System.getProperty("user.dir")
            + "/files/semantic-scene-library/example/SceneTest.owl";
    /**
     * the file path of the empty ontology populated by this example.
     * <b>REMARK</b>: to not overwrite this ontology!
     */
    public static final String ONTO_FILE_LOADING_PATH = System.getProperty("user.dir")
            + "/files/semantic-scene-library/Aboxes/empty-scene.owl";
    /**
     * the IRI path of the ontology generated by this example.
     */
    public static final String ONTO_IRI_PATH = "http://www.semanticweb.org/emaroLab/luca-buoncompagni/sit";
    /**
     * set to <code>false</code> to apply the ontological changes as soon as they are proposed.
     * If you set it to <code>true</code>, the semantics will be written to the ontology only
     * when {@link OWLReferences#applyOWLManipulatorChanges()} is called.
     */
    public static final boolean ONTO_BUFFERISE_CHANGES = true;

    public static void main(String[] args) throws InterruptedException {
        OWLReferences ontoRef = ObjectHierarchyTest.addTestingObjects(
                ONTO_NAME, ONTO_FILE_LOADING_PATH, ONTO_IRI_PATH, ONTO_BUFFERISE_CHANGES, false, false);

        SITBase.showDebugs( true);
        SITBase.LOG( "\n\n");

        // disjointing do not need pre-reasoning
        // (semantic Geometric Primitive already of a given type)
        ontoRef.makeDisjointIndividuals( ontoRef.getIndividualB2Class( MORPrimitive.INITIAL_PRIMITIVE_TYPE));
        ontoRef.synchronizeReasoner(); // infer spatial relationships

        SceneSemantics scene = new SceneSemantics(ontoRef);
        scene.setObjects( MORPrimitive.loadFromClasses( ONTO_NAME));
        scene.writeSemantics(); // always clear and rewrite all
        ontoRef.applyOWLManipulatorChanges();
        scene.readSemantics(); // reads only the type

        System.out.println("---------------------------------------");

        // todo: recogniser, make a scene-shot

        SceneTemplate template = new SceneTemplate( ontoRef, "");
        SceneTemplate.LearningResults learned = template.learn(scene);
        if( learned.shouldBeLearned())
            learned.getLearnedScene().writeSemantics();
        System.out.println( "Should learn ?!\n\t\t " + learned.shouldBeLearned() + "\t\t" + learned);

        ontoRef.applyOWLManipulatorChanges();
        ontoRef.synchronizeReasoner();

        System.out.println("$$$$ " + ontoRef.getOWLObjectName( ontoRef.getIndividualClasses("S")));

        System.out.println("---------------------------------------");

        // save ontology and inferred axioms to see reasingng effects
        ontoRef.saveOntology( ONTO_FILE_SAVING_PATH); // remember to call the reasoner when opening this file
        SITBase.SITBase.LOG( "\tontological representation saved on: " + ONTO_FILE_SAVING_PATH);
    }

}
