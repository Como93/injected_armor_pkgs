package it.emarolab.scene_identification_tracking.semanticSceneLibrary.example;

import it.emarolab.amor.owlInterface.OWLReferences;
import it.emarolab.amor.owlInterface.OWLReferencesInterface;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.Base;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.core.Semantics;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.core.aMORDescriptor.aMORObject.*;

import java.util.Set;

public class ObjectSemanticTest{

    /**
     * the name of the {@link it.emarolab.amor.owlInterface.OWLReferences} of the aMORObject
     * library addressing the ontology in which the objects of this example will be mapped.
     */
    public static final String ONTO_NAME = "ONTO_NAME";
    /**
     * the file path in which the ontology created by this example will be saved.
     */
    public static final String ONTO_FILE_SAVING_PATH = System.getProperty("user.dir")
            + "/resources/semantic-scene-library/example/ObjectHierarchyTest.owl";
    /**
     * the file path of the empty ontology populated by this example.
     * <b>REMARK</b>: to not overwrite this ontology!
     */
    public static final String ONTO_FILE_LOADING_PATH = System.getProperty("user.dir")
            + "/resources/semantic-scene-library/Aboxes/empty-object.owl";
    /**
     * the IRI path of the ontology generated by this example.
     */
    public static final String ONTO_IRI_PATH = "http://www.semanticweb.org/emaroLab/luca-buoncompagni/sit";
    /**
     * set to <code>false</code> to apply the ontological changes as soon as they are proposed.
     * If you set it to <code>true</code>, the semantic will be written to the ontology only
     * when {@link OWLReferences#applyOWLManipulatorChanges()} or
     * {@link OWLReferences#synchronizeReasoner()} are called.
     */
    public static final boolean ONTO_BUFFERISE_CHANGES = false;

    // for generating an unique identifier for each dummy object created by this example
    private static long objectId = 0;

    public static void main(String[] args) {
        OWLReferences ontoRef = addTestingObjects(ONTO_NAME, ONTO_FILE_LOADING_PATH, ONTO_IRI_PATH, ONTO_BUFFERISE_CHANGES, true, false);



        Base.Logger.LOG( "____________________________________________\n");
        Base.Logger.LOG( "____________________________________________\n");
        Set<MORPrimitive> objects = MORPrimitive.loadFromClass( ontoRef);
        Base.Logger.LOG( "____________________________________________\n");
        Base.Logger.LOG( "all objects: " + objects);
        Base.Logger.LOG( "____________________________________________\n");
        Semantics.MappingTransitions reads = MORPrimitive.readAllSemantics(objects);
        Base.Logger.LOG("READ ALL: " + reads);


        long t = System.nanoTime();
        ontoRef.synchronizeReasoner();
        double sec = (System.nanoTime() - t) / 1000000;
        Base.Logger.LOG( "**************** Reasoning: " + sec + "[ms]");

        Base.Logger.LOG( "____________________________________________\n");
        Base.Logger.LOG( "____________________________________________\n");
        Semantics.MappingTransitions writes = MORPrimitive.writeAllSemantics(objects);
        Base.Logger.LOG("WRITER ALL: " + writes);



        // save the ontology by exporting the inferences to see API reasoning effects
        ontoRef.saveOntology(  ONTO_FILE_SAVING_PATH); // remember to call the reasoner when opening this file
        Base.Logger.LOG( "\tontological representation saved on: " + ONTO_FILE_SAVING_PATH);

    }

    public static OWLReferences addTestingObjects(String ontoName, String ontoFileLoadingPath, String ontoIRI,
                                                  boolean bufferise, boolean logging, boolean onlyFeasible){
        // initialise an ontology with the aMORObject interface (used for Semantics.Descriptor)
        OWLReferences ontoRef = OWLReferencesInterface.OWLReferencesContainer.newOWLReferenceFromFileWithPellet(
                ontoName, ontoFileLoadingPath, ontoIRI, bufferise);

        Base.Logger.LOG( "\tontological representation loaded from: " + ontoFileLoadingPath);

        // set logging
        it.emarolab.amor.owlDebugger.Logger.setPrintOnConsole( false); // remove aMORObject log
        //Base.Logger.shutDownLoggers( true);
        Base.Logger.showDebugs( logging);

        // test a Primitive object
        if( ! onlyFeasible) {
            Base.Logger.LOG("____________________________________________\n");
            MORPrimitive b = new MORPrimitive( ontoName, false, false); // do not map time and id
            b.setCentroid(  .1, .2, .3);
            Base.Logger.LOG( b.writeSemantic());
            Base.Logger.LOG("____________________________________________\n");
            MORPrimitive b1 = new MORPrimitive( ontoName, false, false);
            // todo make setInstanc which updates all semantics
            // todo move write and read on Semantics.Property/3D
            b1.getSemantics().setInstance( b.getSemantics().getInstanceName());
            Base.Logger.LOG( b1.readSemantic());
            Base.Logger.LOG("____________________________________________\n");
        }

        // test a Sphere
        Base.Logger.LOG( "____________________________________________\n");
        MORSphere s = new MORSphere(ontoName, true, false);
        s.setRadius( 1.1);
        s.setCentroid(  99.2, 76.3, -3.4);
        Base.Logger.LOG( "  Sphere  : " + s);
        Base.Logger.LOG( "____________________________________________\n");
        Base.Logger.LOG( s.writeSemantic());
        Base.Logger.LOG( "____________________________________________\n");

        if( ! onlyFeasible) {
            Base.Logger.LOG("____________________________________________\n");
            MOROrientable o = new MOROrientable( ontoRef);
            Base.Logger.LOG("Orientable: " + o);
            Base.Logger.LOG("____________________________________________\n");
            Base.Logger.LOG(o.writeSemantic());    // ADDED
        }

        // test a Plane
        Base.Logger.LOG( "____________________________________________\n");
        MORPlane p = new MORPlane( ontoName, true, true);
        p.setHessian( -0.99);
        p.setCentroid(  99.2, 76.3, -2.4);//s); // todo add getXCentroid
        p.setAxis( .8, .6, .4);
        Base.Logger.LOG( "   Plane  : " + p);
        Base.Logger.LOG( "____________________________________________\n");
        Base.Logger.LOG( p.writeSemantic());    // ADDED
        Base.Logger.LOG( "____________________________________________\n");

        // test a Cone
        Base.Logger.LOG( "____________________________________________\n");
        MORCone c = new MORCone( ontoName, false, false);
        c.setCentroid( s);
        c.setAxis( p);
        c.setHeight( 22.0);
        c.setRadius( 3.5);
        c.setApex( 100.0, 200.0, 300.0);
        Base.Logger.LOG( "   Cone   : " + c);
        Base.Logger.LOG( "____________________________________________\n");
        Base.Logger.LOG( c.writeSemantic());    // ADDED
        Base.Logger.LOG( "____________________________________________\n");

        // test a Cylinder
        Base.Logger.LOG( "____________________________________________\n");
        MORCylinder r = new MORCylinder( ontoName);
        r.setCentroid( s);
        r.setAxis( p);
        r.setHeight( 22.0);
        r.setRadius( 3.5);
        r.setPointOnAxis( 100.0, 200.0, 300.0);
        r.setPointOnAxisProperty( Base.DATAPROPERTY.DEFAULT_objCYLINDER_POINT);
        Base.Logger.LOG( " Cylinder : " + r);
        Base.Logger.LOG( "____________________________________________\n");
        Base.Logger.LOG( r.writeSemantic());    // UPDATED
        Base.Logger.LOG( "____________________________________________\n");

        return ontoRef;
    }
}

