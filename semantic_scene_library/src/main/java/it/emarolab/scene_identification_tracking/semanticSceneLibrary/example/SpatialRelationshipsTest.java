package it.emarolab.scene_identification_tracking.semanticSceneLibrary.example;


import it.emarolab.amor.owlInterface.OWLReferences;

import it.emarolab.scene_identification_tracking.semanticSceneLibrary.Logger;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.Logger.SITBase;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.objects.aMOR.MORPrimitive;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.scene.SceneRepresentation;
import org.semanticweb.owlapi.model.*;

import java.util.Set;
import java.util.stream.Stream;


public class SpatialRelationshipsTest {

    /**
     * the name of the {@link it.emarolab.amor.owlInterface.OWLReferences} of the aMOR
     * library addressing the ontology in which the objects of this example will be mapped.
     */
    public static final String ONTO_NAME = "ONTO_NAME";
    /**
     * the file path in which the ontology created by this example will be saved.
     */
    public static final String ONTO_FILE_SAVING_PATH = System.getProperty("user.dir")
            + "/files/semantic-scene-library/example/SpatialRelationshipsTest.owl";
    /**
     * the file path of the empty ontology populated by this example.
     * <b>REMARK</b>: to not overwrite this ontology!
     */
    public static final String ONTO_FILE_LOADING_PATH = System.getProperty("user.dir")
            + "/files/semantic-scene-library/ontologyBase/empty-object_spatial-rules.owl";
    /**
     * the IRI path of the ontology generated by this example.
     */
    public static final String ONTO_IRI_PATH = "http://www.semanticweb.org/emaroLab/luca-buoncompagni/sit";
    /**
     * set to <code>false</code> to apply the ontological changes as soon as they are proposed.
     * If you set it to <code>true</code>, the semantics will be written to the ontology only
     * when {@link OWLReferences#applyOWLManipulatorChanges()} is called.
     */
    public static final boolean ONTO_BUFFERISE_CHANGES = true;

    public static void main(String[] args) throws InterruptedException {
        OWLReferences ontoRef = ObjectHierarchyTest.addTestingObjects(
                ONTO_NAME, ONTO_FILE_LOADING_PATH, ONTO_IRI_PATH, ONTO_BUFFERISE_CHANGES, false, false);

        SITBase.showDebugs( true);
        SITBase.LOG( "\n\n");

        // disjointing do not need pre-reasoning
        // (semantic Geometric Primitive already of a given type)
        ontoRef.makeDisjointIndividuals( ontoRef.getIndividualB2Class( MORPrimitive.INITIAL_PRIMITIVE_TYPE));
        ontoRef.synchronizeReasoner(); // infer spatial relationships

        // retrieve sphere object
        Set< MORPrimitive> allPrimitive = MORPrimitive.loadFromClasses( ONTO_NAME);
        SceneRepresentation.MORSpatialCollector collector = new SceneRepresentation.MORSpatialCollector( ontoRef);
        for( MORPrimitive o : allPrimitive) {
            SceneRepresentation.MORSpatialCollector relations = o.getSemantics().querySpatialProperties();
            SITBase.LOG( relations);
            collector.addAll( relations);
        }

        SITBase.LOG( "-------------------------------------------------------------------------");
        SITBase.LOG( "\nAll raw spatial relations that describe a scene:");
        SITBase.LOG( collector);
        SITBase.LOG( "-------------------------------------------------------------------------");
        SITBase.LOG( "\n\t* That can be cleaned:");
        collector.clean();
        SITBase.LOG( collector);
        SITBase.LOG( "-------------------------------------------------------------------------");
        SITBase.LOG( "\n\t\t** And that can be mapped into the scene representation:");
        SceneRepresentation.MORScene atoms = collector.getSceneAtoms();
        int cnt = 0;
        for( SceneRepresentation.MORSceneAtom a : atoms.getAtoms())
            SITBase.LOG( "\t-" + Logger.getfixedStringLength( ++cnt + "", 4,true) + ".\t\t" + a);
        SITBase.LOG( "\n\t\t\t*** which computes also the cardinality: " + atoms.getCardinality());
        SITBase.LOG( "-------------------------------------------------------------------------");


        // save ontology and inferred axioms to see reasingng effects
        ontoRef.saveOntology( true, ONTO_FILE_SAVING_PATH);
        SITBase.SITBase.LOG( "\n\tontological representation saved on: " + ONTO_FILE_SAVING_PATH);
    }
}
