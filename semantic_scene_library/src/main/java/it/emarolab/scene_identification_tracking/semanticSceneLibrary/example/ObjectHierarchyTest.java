package it.emarolab.scene_identification_tracking.semanticSceneLibrary.example;

import it.emarolab.amor.owlDebugger.Logger;
import it.emarolab.amor.owlInterface.OWLReferences;
import it.emarolab.amor.owlInterface.OWLReferencesInterface;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.Semantics;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.aMORDescriptor.MOR3DArray;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.objects.ObjectSemantics;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.objects.aMOR.*;
import it.emarolab.scene_identification_tracking.semanticSceneLibrary.Logger.SITBase;

/**
 * A runnable example to see the object java/semantic mapping behaviour.
 * <p>
 *     This implementation shown how it is possible to instantiate java objects
 *     and map them with respect to the semantic defined in the package:
 *     {@link it.emarolab.scene_identification_tracking.semanticSceneLibrary.objects}.
 * <p>
 *     In particular, this example generated an Object of each shape and writes/reads it
 *     to/from the ontology by performing some manipulation for showing purposes.
 *     Finally, the generated semantic structure will be saved in a file specified by: {@link #ONTO_FILE_SAVING_PATH}.
 * <p>
 *     This example uses the basics semantic representation of the objects hierarchy described by the
 *     empty ontology (only T-box) available as a file at the {@link #ONTO_FILE_LOADING_PATH}.
 *     Check out other interesting ontology in the folder:
 *     <code>//scene_identification_tracking/files/semantic-scene-library</code>.
 * <p>
 *     <b>REMARK</b>: in this example the reasoner of the ontology is never user.
 *
 * <div style="text-align:center;"><small>
 * <b>File</b>:       it.emarolab.scene_identification_tracking.semanticSceneLibrary.Semantics <br>
 * <b>Licence</b>:    GNU GENERAL PUBLIC LICENSE. Version 3, 29 June 2007 <br>
 * <b>Author</b>:     Buoncompagni Luca (luca.buoncompagni@edu.unige.it) <br>
 * <b>affiliation</b>: DIBRIS, EMAROLab, University of Genoa. <br>
 * <b>date</b>:       06/01/2017 <br>
 * </small></div>
 *
 * @see Semantics
 * @see MOR3DArray
 * @see MORPrimitive
 */
public class ObjectHierarchyTest {

    /**
     * the name of the {@link it.emarolab.amor.owlInterface.OWLReferences} of the aMOR
     * library addressing the ontology in which the objects of this example will be mapped.
     */
    public static final String ONTO_NAME = "ONTO_NAME";
    /**
     * the file path in which the ontology created by this example will be saved.
     */
    public static final String ONTO_FILE_SAVING_PATH = System.getProperty("user.dir")
            + "/files/semantic-scene-library/example/ObjectHierarchyTest.owl";
    /**
     * the file path of the empty ontology populated by this example.
     * <b>REMARK</b>: to not overwrite this ontology!
     */
    public static final String ONTO_FILE_LOADING_PATH = System.getProperty("user.dir")
            + "/files/semantic-scene-library/ontologyBase/empty-object.owl";
    /**
     * the IRI path of the ontology generated by this example.
     */
    public static final String ONTO_IRI_PATH = "http://www.semanticweb.org/emaroLab/luca-buoncompagni/sit";
    /**
     * set to <code>false</code> to apply the ontological changes as soon as they are proposed.
     * If you set it to <code>true</code>, the semantics will be written to the ontology only
     * when {@link OWLReferences#applyOWLManipulatorChanges()} or
     * {@link OWLReferences#synchronizeReasoner()} are called.
     */
    public static final boolean ONTO_BUFFERISE_CHANGES = false;

    // for generating an unique identifier for each dummy object created by this example
    private static long objectId = 0;

    /**
     * The main running function of this example that show the implementation of Object semantics
     * just calls {@link #addTestingObjects(String, String, String, boolean, boolean)}
     * and saves the returning ontology in a file at the path described by {@link #ONTO_FILE_SAVING_PATH}.
     * @param args (not used).
     */
    public static void main(String[] args) {
        OWLReferences ontoRef = addTestingObjects(ONTO_NAME, ONTO_FILE_LOADING_PATH, ONTO_IRI_PATH, ONTO_BUFFERISE_CHANGES, true, false);

        // update the reasoner to place object individual in the correct class
        long t = System.nanoTime();
        SITBase.SITBase.LOG( "Reasoning starting ....");
        ontoRef.synchronizeReasoner();
        double sec = (System.nanoTime() - t) / 1000000;
        SITBase.SITBase.LOG( ".... end:" + sec + " ms.");

        // save the ontology by exporting the inferences to see API reasoning effects
        ontoRef.saveOntology( true, ONTO_FILE_SAVING_PATH); // remember to call the reasoner when opening this file
        SITBase.SITBase.LOG( "\tontological representation saved on: " + ONTO_FILE_SAVING_PATH);

    }

    /**
     * A tester an example of {@link ObjectSemantics.Primitive} interface usage.
     * It reads an ontology, create some objects with a same (e.g.: for perceptions)
     * and return the aMOR reference to the ontology.<br>
     * <b>REMARK/b>: {@link SpatialRelationshipsTest} depends on this method since it is
     * based on the dummy ID crated for specific shapes (e.g.: see {@link SpatialRelationshipsTest#SPHERE_ID}).
     * @param ontoName the aMOR ontology name for static referring across the architecture.
     * @param ontoFileLoadingPath the file path for base ontology loading.
     * @param ontoIRI the IRI assigned to this semantic description.
     * @param bufferise <code>false</code> if the change should be applied immediacy to the OWL ontology
     *                  by the aMOR interface. Remember to call {@link OWLReferences#applyOWLManipulatorChanges()}
     *                  or {@link OWLReferences#synchronizeReasoner()} if bufferise is set to <code>true</code>.
     * @param logging the {@link SITBase.SITBase#DEBUG} value for debugging SIT logging enabling.
     * @return
     */
    public static OWLReferences addTestingObjects(String ontoName, String ontoFileLoadingPath, String ontoIRI,
                                                  boolean bufferise, boolean logging, boolean onlyFeasible){
        // initialise an ontology with the aMOR interface (used for Semantics.Descriptor)
        OWLReferences ontoRef = OWLReferencesInterface.OWLReferencesContainer.newOWLReferenceFromFileWithPellet(
                ontoName, ontoFileLoadingPath, ontoIRI, bufferise);

        SITBase.LOG( "\tontological representation loaded from: " + ontoFileLoadingPath);

        // set logging
        Logger.setPrintOnConsole( false); // remove aMOR log
        //Semantics.Base.shutDownLoggers( true);
        SITBase.showDebugs( logging);

        // test a Primitive object
        MOR3DArray centroid = new MOR3DArray(0.01, 0.02, 0.03, "dummyCentroid");
        if( ! onlyFeasible) {
            SITBase.SITBase.LOG("____________________________________________\n");
            MORPrimitive b = new MORPrimitive(ONTO_NAME, objectId++, centroid);
            b.shouldMapId(true);
            b.shouldMapTime(true);
            SITBase.SITBase.LOG("Primitive : " + b);
            SITBase.SITBase.LOG("____________________________________________\n");
            SITBase.SITBase.LOG(b.readSemantics());     // ABSENT
            SITBase.SITBase.LOG("-------------");
            SITBase.SITBase.LOG(b.writeSemantics());    // ADDED
            SITBase.SITBase.LOG("-------------");
            SITBase.SITBase.LOG(b.readSemantics());     // NOT CHANGED
            SITBase.SITBase.LOG("-------------");
            SITBase.SITBase.LOG(b.writeSemantics());    // NOT CHANGED
            SITBase.SITBase.LOG("-------------");
            b.getCentroid().setX(0.001);
            SITBase.SITBase.LOG(b.writeSemantics());    // UPDATED
            SITBase.SITBase.LOG("____________________________________________\n");
        }

        // test a Sphere
        SITBase.SITBase.LOG( "____________________________________________\n");
        MORSphere s = new MORSphere(ONTO_NAME, objectId++, centroid, 1.1);
        SITBase.SITBase.LOG( "  Sphere  : " + s);
        SITBase.SITBase.LOG( "____________________________________________\n");
        SITBase.SITBase.LOG( s.readSemantics());     // ABSENT
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( s.writeSemantics());    // ADDED
        SITBase.SITBase.LOG( "-------------");
        s.getCentroid().setX( -9999.0);
        SITBase.SITBase.LOG( s.readSemantics());     // SUCCESS
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( s.writeSemantics());    // NOT CHANGED
        SITBase.SITBase.LOG( "-------------");
        s.getCentroid().setX( 0.1);
        s.setRadius( 2.1);
        SITBase.SITBase.LOG( s.writeSemantics());    // UPDATED

        ontoRef.addIndividualB2Class( s.getSemantics().getIndividualName(), "Sphere" );

        SITBase.SITBase.LOG( "____________________________________________\n");

        // test an Orientable object
        MOR3DArray axis = new MOR3DArray(-1, -2, -3, "dummyAxis");
        if( ! onlyFeasible) {
            SITBase.SITBase.LOG("____________________________________________\n");
            MOROrientable o = new MOROrientable(ONTO_NAME, objectId++, centroid, axis);
            SITBase.SITBase.LOG("Orientable: " + o);
            SITBase.SITBase.LOG("____________________________________________\n");
            SITBase.SITBase.LOG(o.readSemantics());     // ABSENT
            SITBase.SITBase.LOG("-------------");
            SITBase.SITBase.LOG(o.writeSemantics());    // ADDED
            SITBase.SITBase.LOG("-------------");
            SITBase.SITBase.LOG(o.readSemantics());     // NOT CHANGED
            SITBase.SITBase.LOG("-------------");
            SITBase.SITBase.LOG(o.writeSemantics());    // NOT CHANGED
            SITBase.SITBase.LOG("-------------");
            o.getAxis().setX(-4);
            SITBase.SITBase.LOG(o.writeSemantics());    // UPDATED
            SITBase.SITBase.LOG("____________________________________________\n");
        }

        // test a Plane
        SITBase.SITBase.LOG( "____________________________________________\n");
        MORPlane p = new MORPlane(ONTO_NAME, objectId++, centroid, axis, -0.99);
        SITBase.SITBase.LOG( "   Plane  : " + p);
        SITBase.SITBase.LOG( "____________________________________________\n");
        SITBase.SITBase.LOG( p.readSemantics());     // ABSENT
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( p.writeSemantics());    // ADDED
        SITBase.SITBase.LOG( "-------------");
        p.setHessian( 99.0);
        SITBase.SITBase.LOG( p.readSemantics());     // SUCCESS
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( p.writeSemantics());    // NOT CHANGED
        SITBase.SITBase.LOG( "-------------");
        p.setHessian( -9.77);
        p.getCentroid().setXYZ( 0.01, 0.02, 0.03);
        SITBase.SITBase.LOG( p.writeSemantics());    // UPDATED
        SITBase.SITBase.LOG( "____________________________________________\n");

        // test a Cone
/*        SITBase.SITBase.LOG( "____________________________________________\n");
        MOR3DArray apex = new MOR3DArray( 100, 200, 300, "dummyApex");
        MORCone c = new MORCone(ONTO_NAME, objectId++, centroid, axis, 5.5, 6.6, apex);
        SITBase.SITBase.LOG( "   Cone   : " + c);
        SITBase.SITBase.LOG( "____________________________________________\n");
        SITBase.SITBase.LOG( c.readSemantics());     // ABSENT
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( c.writeSemantics());    // ADDED
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( c.readSemantics());     // NOT CHANGED
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( c.writeSemantics());    // NOT CHANGED
        SITBase.SITBase.LOG( "-------------");
        c.getAxis().setX( -14);
        SITBase.SITBase.LOG( c.writeSemantics());    // UPDATED
        SITBase.SITBase.LOG( "____________________________________________\n");

        // test a Cylinder
        SITBase.SITBase.LOG( "____________________________________________\n");
        MOR3DArray pointOnAxis = new MOR3DArray( 700, 800, 900, "dummyPointOnAxis");
        MORCylinder r = new MORCylinder(ONTO_NAME, objectId++, centroid, axis, 10.1, 11.11, pointOnAxis);
        SITBase.SITBase.LOG( " Cylinder : " + r);
        SITBase.SITBase.LOG( "____________________________________________\n");
        SITBase.SITBase.LOG( r.readSemantics());     // ABSENT
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( r.writeSemantics());    // ADDED
        SITBase.SITBase.LOG( "-------------");
        r.setHeight( -55.0);
        r.setRadius( -55.0);
        SITBase.SITBase.LOG( r.readSemantics());     // SUCCESS
        SITBase.SITBase.LOG( "-------------");
        SITBase.SITBase.LOG( r.writeSemantics());    // NOT CHANGED
        SITBase.SITBase.LOG( "-------------");
        r.getPointOnAxis().setZ( 3000);
        SITBase.SITBase.LOG( r.writeSemantics());    // UPDATED
        SITBase.SITBase.LOG( "____________________________________________\n");
*/
        // todo add how to change semantics (getters)
        // todo add example when object are created (not dummy instantiated as above)

        return ontoRef;
    }
}
